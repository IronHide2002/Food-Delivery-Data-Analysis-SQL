# Food Delivery Database

## Overview
The Food Delivery Database is designed to manage user signups, sales transactions, and product details in a food delivery service. This database tracks gold user signups, general user information, sales data, and product pricing to facilitate various analytical queries.

## Database Structure
The database contains the following tables:

1. **goldusers_signup**
   - `userid` (INTEGER): Unique identifier for each user.
   - `gold_signup_date` (DATE): The date when the user signed up for the gold membership.

2. **users**
   - `userid` (INTEGER): Unique identifier for each user.
   - `signup_date` (DATE): The date when the user registered.

3. **sales**
   - `userid` (INTEGER): Unique identifier for the user making the purchase.
   - `created_date` (DATE): The date when the sale was made.
   - `product_id` (INTEGER): Unique identifier for the product sold.

4. **product**
   - `product_id` (INTEGER): Unique identifier for each product.
   - `product_name` (TEXT): The name of the product.
   - `price` (INTEGER): The price of the product.

## SQL Commands

### 1. Create the Database
```sql
CREATE DATABASE fooddel;
USE fooddel;
```

### 2. Create Tables
#### Gold Users Signup Table
```sql
DROP TABLE IF EXISTS goldusers_signup;
CREATE TABLE goldusers_signup (
    userid INTEGER,
    gold_signup_date DATE
);
```

#### Users Table
```sql
DROP TABLE IF EXISTS users;
CREATE TABLE users (
    userid INTEGER,
    signup_date DATE
);
```

#### Sales Table
```sql
DROP TABLE IF EXISTS sales;
CREATE TABLE sales (
    userid INTEGER,
    created_date DATE,
    product_id INTEGER
);
```

#### Product Table
```sql
DROP TABLE IF EXISTS product;
CREATE TABLE product (
    product_id INTEGER,
    product_name TEXT,
    price INTEGER
);
```

### 3. Insert Records into Tables
#### Gold Users Signup
```sql
INSERT INTO goldusers_signup(userid, gold_signup_date) 
VALUES 
(1, '2017-09-22'),
(3, '2017-04-21');
```

#### Users
```sql
INSERT INTO users(userid, signup_date) 
VALUES 
(1, '2014-09-02'),
(2, '2015-01-15'),
(3, '2014-04-11');
```

#### Sales
```sql
INSERT INTO sales(userid, created_date, product_id) 
VALUES 
(1, '2017-04-19', 2),
(3, '2019-12-18', 1),
(2, '2020-07-20', 3),
(1, '2019-10-23', 2),
(1, '2018-03-19', 3),
(3, '2016-12-20', 2),
(1, '2016-11-09', 1),
(1, '2016-05-20', 3),
(2, '2017-09-24', 1),
(1, '2017-03-11', 2),
(1, '2016-03-11', 1),
(3, '2016-11-10', 1),
(3, '2017-12-07', 2),
(3, '2016-12-15', 2),
(2, '2017-11-08', 2),
(2, '2018-09-10', 3);
```

#### Product
```sql
INSERT INTO product(product_id, product_name, price) 
VALUES
(1, 'p1', 980),
(2, 'p2', 870),
(3, 'p3', 330);
```

### 4. Queries
Below are some key SQL queries used to extract insights from the database:

1. **Total Amount Spent by Each Customer**
   ```sql
   SELECT s.userid, SUM(p.price) AS total_amt_spent
   FROM sales s
   JOIN product p ON s.product_id = p.product_id
   GROUP BY s.userid;
   ```

2. **Count Distinct Days Each Customer Visited**
   ```sql
   SELECT userid, COUNT(DISTINCT created_date) AS distinct_days
   FROM sales 
   GROUP BY userid;
   ```

3. **First Product Purchased by Each Customer**
   ```sql
   SELECT *
   FROM (
       SELECT *, RANK() OVER (PARTITION BY userid ORDER BY created_date) AS rnk
       FROM sales
   ) s
   WHERE rnk = 1;
   ```

4. **Most Purchased Product Overall**
   ```sql
   SELECT userid, COUNT(product_id) AS cnt 
   FROM sales 
   WHERE product_id = (
       SELECT product_id 
       FROM sales 
       GROUP BY product_id 
       ORDER BY COUNT(product_id) DESC
       LIMIT 1
   ) 
   GROUP BY userid;
   ```

5. **Most Popular Product for Each Customer**
   ```sql
   SELECT * 
   FROM (
       SELECT *, RANK() OVER (PARTITION BY userid ORDER BY cnt DESC) AS rnk
       FROM (
           SELECT userid, product_id, COUNT(product_id) AS cnt 
           FROM sales
           GROUP BY userid, product_id
       ) s
   ) s1
   WHERE rnk = 1;
   ```

